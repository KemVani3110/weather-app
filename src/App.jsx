import { useState, useEffect } from "react";
import { Cloud, AlertCircle, Search, RefreshCw } from "lucide-react";
import ForecastWeather from "./components/ForecastWeather";
import SearchBar from "./components/SearchBar";
import WeatherCard from "./components/WeatherCard";
import LoadingSpinner from "./components/LoadingSpinner";
import {
  useCurrentWeather,
  useWeatherByCoords,
  useForecast,
  useForecastByCoords,
  useAQIByCoords,
} from "./hooks/useWeather";
import { getSearchHistory, addToSearchHistory } from "./utils/localStorage";
import "./styles/App.css";

/**
 * Component ch√≠nh c·ªßa ·ª©ng d·ª•ng th·ªùi ti·∫øt
 * Qu·∫£n l√Ω state t·ªïng th·ªÉ v√† ƒëi·ªÅu ph·ªëi c√°c component con
 *
 * Features:
 * - T√¨m ki·∫øm th·ªùi ti·∫øt theo t√™n th√†nh ph·ªë ho·∫∑c t·ªça ƒë·ªô GPS
 * - Dark mode toggle
 * - Chuy·ªÉn ƒë·ªïi ƒë∆°n v·ªã nhi·ªát ƒë·ªô (¬∞C/¬∞F)
 * - L∆∞u l·ªãch s·ª≠ t√¨m ki·∫øm
 * - Hi·ªÉn th·ªã th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o 5 ng√†y
 */
function App() {
  // State cho t√¨m ki·∫øm theo t√™n th√†nh ph·ªë
  const [searchCity, setSearchCity] = useState("");

  // State cho t√¨m ki·∫øm theo t·ªça ƒë·ªô GPS
  const [coords, setCoords] = useState({ lat: null, lon: null });

  // State cho dark mode, l·∫•y t·ª´ localStorage ho·∫∑c m·∫∑c ƒë·ªãnh false
  const [darkMode, setDarkMode] = useState(
    () => localStorage.getItem("darkMode") === "true"
  );

  // State cho ƒë∆°n v·ªã nhi·ªát ƒë·ªô, l·∫•y t·ª´ localStorage ho·∫∑c m·∫∑c ƒë·ªãnh "celsius"
  const [temperatureUnit, setTemperatureUnit] = useState(
    () => localStorage.getItem("temperatureUnit") || "celsius"
  );

  // === REACT QUERY HOOKS ===

  // Hook l·∫•y th·ªùi ti·∫øt hi·ªán t·∫°i theo t√™n th√†nh ph·ªë
  const {
    data: weatherData, // D·ªØ li·ªáu th·ªùi ti·∫øt
    isLoading: isLoadingCity, // Loading state
    error: cityError, // Error state
    refetch: refetchCity, // Function ƒë·ªÉ retry
  } = useCurrentWeather(searchCity);

  // Hook l·∫•y th·ªùi ti·∫øt hi·ªán t·∫°i theo t·ªça ƒë·ªô
  const {
    data: coordsWeatherData,
    isLoading: isLoadingCoords,
    error: coordsError,
    refetch: refetchCoords,
  } = useWeatherByCoords(coords.lat, coords.lon);

  // Hook l·∫•y ch·ªâ s·ªë ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ (AQI) theo t·ªça ƒë·ªô
  const {
    data: aqiData,
    isLoading: isAQILoading,
    error: aqiError,
  } = useAQIByCoords(
    coords.lat || weatherData?.coord?.lat,
    coords.lon || weatherData?.coord?.lon
  );

  // Hook l·∫•y d·ª± b√°o th·ªùi ti·∫øt theo t√™n th√†nh ph·ªë
  const { data: forecastData, isLoading: isLoadingForecast } =
    useForecast(searchCity);

  // Hook l·∫•y d·ª± b√°o th·ªùi ti·∫øt theo t·ªça ƒë·ªô
  const { data: coordsForecastData, isLoading: isLoadingCoordsForecast } =
    useForecastByCoords(coords.lat, coords.lon);

  // === COMPUTED VALUES ===

  // T·ªïng h·ª£p loading state t·ª´ c·∫£ ba ph∆∞∆°ng th·ª©c t√¨m ki·∫øm
  const isLoading = isLoadingCity || isLoadingCoords || isAQILoading;

  // T·ªïng h·ª£p error state t·ª´ c·∫£ ba ph∆∞∆°ng th·ª©c
  const error = cityError || coordsError || aqiError;

  // Ch·ªçn data th·ªùi ti·∫øt hi·ªán t·∫°i (∆∞u ti√™n city search tr∆∞·ªõc coords)
  const currentWeatherData = weatherData || coordsWeatherData;

  // Ch·ªçn data d·ª± b√°o th·ªùi ti·∫øt (∆∞u ti√™n city search tr∆∞·ªõc coords)
  const currentForecastData = forecastData || coordsForecastData;

  // T·ªïng h·ª£p loading state cho forecast
  const isForecastLoading = isLoadingForecast || isLoadingCoordsForecast;

  // === SIDE EFFECTS ===

  /**
   * Effect ƒë·ªÉ apply dark mode class v√†o body v√† l∆∞u v√†o localStorage
   * Ch·∫°y m·ªói khi darkMode state thay ƒë·ªïi
   */
  useEffect(() => {
    document.body.className = darkMode ? "dark-mode" : "";
    localStorage.setItem("darkMode", darkMode);
  }, [darkMode]);

  /**
   * Effect ƒë·ªÉ l∆∞u temperatureUnit v√†o localStorage
   * Ch·∫°y m·ªói khi temperatureUnit thay ƒë·ªïi
   */
  useEffect(() => {
    localStorage.setItem("temperatureUnit", temperatureUnit);
  }, [temperatureUnit]);

  // === EVENT HANDLERS ===

  /**
   * Handler cho vi·ªác search th·ªùi ti·∫øt
   * C√≥ th·ªÉ search theo t√™n th√†nh ph·ªë ho·∫∑c t·ªça ƒë·ªô GPS
   *
   * @param {string} city - T√™n th√†nh ph·ªë (optional)
   * @param {number} lat - Vƒ© ƒë·ªô (optional)
   * @param {number} lon - Kinh ƒë·ªô (optional)
   */
  const handleSearch = (city, lat, lon) => {
    if (city) {
      // Search theo t√™n th√†nh ph·ªë
      setSearchCity(city);
      setCoords({ lat: null, lon: null }); // Reset coords
      addToSearchHistory(city); // L∆∞u v√†o history
    } else if (lat && lon) {
      // Search theo t·ªça ƒë·ªô GPS
      setCoords({ lat, lon });
      setSearchCity(""); // Reset city search
    }
  };

  /**
   * Handler ƒë·ªÉ retry API call khi c√≥ l·ªói
   * G·ªçi refetch t∆∞∆°ng ·ª©ng v·ªõi ph∆∞∆°ng th·ª©c search hi·ªán t·∫°i
   */
  const handleRetry = () => {
    if (searchCity) {
      refetchCity(); // Retry city search
    } else if (coords.lat && coords.lon) {
      refetchCoords(); // Retry coords search
    }
  };

  /**
   * Toggle dark mode on/off
   */
  const toggleDarkMode = () => {
    setDarkMode((prev) => !prev);
  };

  /**
   * Toggle ƒë∆°n v·ªã nhi·ªát ƒë·ªô gi·ªØa Celsius v√† Fahrenheit
   */
  const toggleTemperatureUnit = () => {
    setTemperatureUnit((prev) =>
      prev === "celsius" ? "fahrenheit" : "celsius"
    );
  };

  // === RENDER ===

  return (
    <div className="App">
      {/* Header v·ªõi title v√† c√°c controls */}
      <header className="app-header">
        <div className="header-content">
          <Cloud size={48} className="header-icon" />
          <h1>·ª®ng D·ª•ng Th·ªùi Ti·∫øt</h1>
          <p>Tra c·ª©u th·ªùi ti·∫øt nhanh ch√≥ng v√† ch√≠nh x√°c</p>

          {/* Controls cho dark mode v√† temperature unit */}
          <div className="header-controls">
            <button onClick={toggleDarkMode} className="control-btn">
              {darkMode ? "‚òÄÔ∏è" : "üåô"}
            </button>
            <button onClick={toggleTemperatureUnit} className="control-btn">
              ¬∞{temperatureUnit === "celsius" ? "F" : "C"}
            </button>
          </div>
        </div>
      </header>

      <main className="app-main">
        {/* Search bar v·ªõi history support */}
        <SearchBar
          onSearch={handleSearch}
          isLoading={isLoading}
          searchHistory={getSearchHistory()}
        />

        {/* Loading spinner khi ƒëang fetch data */}
        {isLoading && <LoadingSpinner />}

        {/* Error message v·ªõi retry button */}
        {error && (
          <div className="error-message">
            <AlertCircle size={20} className="error-icon" />
            <div className="error-content">
              <p>{error.message}</p>
              <button onClick={handleRetry} className="retry-btn">
                <RefreshCw size={16} />
                Th·ª≠ l·∫°i
              </button>
            </div>
          </div>
        )}

        {/* Main content: Weather card v√† forecast */}
        {currentWeatherData && !isLoading && (
          <>
            {/* Card hi·ªÉn th·ªã th·ªùi ti·∫øt hi·ªán t·∫°i */}
            <WeatherCard
              weatherData={currentWeatherData}
              temperatureUnit={temperatureUnit}
              aqi={aqiData}
            />

            {/* Forecast component - ch·ªâ hi·ªÉn th·ªã khi c√≥ data v√† kh√¥ng loading */}
            {currentForecastData && !isForecastLoading && (
              <ForecastWeather
                forecastData={currentForecastData}
                temperatureUnit={temperatureUnit}
              />
            )}
          </>
        )}

        {/* Welcome message khi ch∆∞a c√≥ data */}
        {!currentWeatherData && !isLoading && !error && (
          <div className="welcome-message">
            <Search size={48} className="welcome-icon" />
            <p>
              Nh·∫≠p t√™n th√†nh ph·ªë ho·∫∑c s·ª≠ d·ª•ng v·ªã tr√≠ hi·ªán t·∫°i ƒë·ªÉ xem th·ªùi ti·∫øt
            </p>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
